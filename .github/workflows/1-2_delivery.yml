name: Build and delivery the project

on:
  workflow_call:
    inputs:
      profile:
        required: true
        type: string
      image_tag:
        required: true
        type: string
    secrets:
      LOCATION:
        required: true
      PROJECT_ID: 
        required: true
      PROVIDER_ID: 
        required: true
      REPOSITORY: 
        required: true
      SERVICE_ACCOUNT:
        required: true

env:
  IMAGE_NAME: nginx-test
  HOSTNAME: ${{ secrets.LOCATION }}-docker.pkg.dev

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Add Image info to HTML
        run: |
          sed -i 's|{{ imageName }}|${{ env.IMAGE_NAME }}|' nginx/index.html
          sed -i 's|{{ imageTag }}|${{ inputs.image_tag }}|' nginx/index.html

      - name: cat index.html
        run: |
          cat nginx/index.html
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # - name: find Dockerfile 
      #   run: |
      #     ls && tree

      - name: Build Docker
        uses: docker/build-push-action@v3
        with:
          context: nginx/
          file: nginx/Dockerfile
          push: false
          load: true
          tags: |
            ${{ env.HOSTNAME }}/${{ secrets.PROJECT_ID }}/${{ secrets.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}
          outputs: type=docker, dest=./${{ env.IMAGE_NAME }}.tar

      - name: Upload artifact(docker image)
        uses: actions/upload-artifact@v3
        with:
         name: ${{ env.IMAGE_NAME }}
         path: ${{ env.IMAGE_NAME }}.tar

  delivery:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download artifact(docker image)
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.IMAGE_NAME }}
          path: ./ 

      - name: Load image
        run: |
          docker load --input ${{ env.IMAGE_NAME }}.tar
          docker image list

    # 1. Workload Identity Federation 인증
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.PROVIDER_ID }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}
          audience: 'https://github.com/park-mh/deploy-test'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.1.1

      - name: Docker configuration
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://${{ env.HOSTNAME }}

      - name: Push to Artifact Registry
        run: |-
          docker push "${{ env.HOSTNAME }}/${{ secrets.PROJECT_ID }}/${{ secrets.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}"
